version: 2.1

orbs:
  node: circleci/node@5
  vercel: scope/vercel@1.0.0

executors:
  node-executor:
    docker:
      - image: cimg/node:16.14
    resource_class: medium

jobs:
  initialisation:
    executor: node-executor
    steps:
      - checkout
      - run: 
          name: Installation des dépendances
          command: npm install
      - run:
          name: Vérification de Next.js
          command: npm list next || echo "Next.js non détecté dans le projet!"
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - package.json
            - package-lock.json

  validation_code:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Linting et analyse du code
          command: echo "Simulation de l'analyse de la qualité du code en cours..."
      - run:
          name: Vérification des types
          command: echo "Simulation de la vérification des typages..."

  construction_projet:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Construction du projet
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .next
            - public

  tests_unitaires:
    executor: node-executor
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./rapports-tests/
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Exécution des tests unitaires
          command: npm run test:unit || echo "Tests unitaires non configurés"
      - store_test_results:
          path: ./rapports-tests/

  tests_integration:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Exécution des tests d'intégration
          command: npm run test:integration || echo "Tests d'intégration non configurés"

  tests_fonctionnels:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Exécution des tests de régression
          command: npm run test:regression || echo "Tests de régression non configurés"

  tests_securite:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Analyse de sécurité
          command: npm run security-scan || echo "Scans de sécurité non configurés"

  tests_accessibilite:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Vérification d'accessibilité
          command: npm run a11y || echo "Tests d'accessibilité non configurés"

  tests_compatibilite:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Tests de compatibilité cross-browser
          command: npm run test:compatibility || echo "Tests de compatibilité non configurés"

  generation_version:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Création d'un tag de version
          command: |
            BRANCHE=${CIRCLE_BRANCH}
            DATE_VERSION=$(date +%Y%m%d%H%M)
            
            if [[ "$BRANCHE" == "develop" ]]; then
              TAG_VERSION="dev-${DATE_VERSION}"
              echo "Version de développement: ${TAG_VERSION}"
            elif [[ "$BRANCHE" == "integration" ]]; then
              TAG_VERSION="int-${DATE_VERSION}"
              echo "Version d'intégration: ${TAG_VERSION}"
            elif [[ "$BRANCHE" == "main" ]]; then
              TAG_VERSION="prod-${DATE_VERSION}"
              echo "Version de production: ${TAG_VERSION}"
            else
              TAG_VERSION="custom-${BRANCHE}-${DATE_VERSION}"
              echo "Version personnalisée: ${TAG_VERSION}"
            fi
            
            echo "${TAG_VERSION}" > .version
      - persist_to_workspace:
          root: .
          paths:
            - .version

  preparation_deploiement:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Préparation de l'environnement
          command: |
            echo "Configuration des variables d'environnement..."
            BRANCHE=${CIRCLE_BRANCH}
            
            if [[ "$BRANCHE" == "develop" ]]; then
              echo "export VERCEL_ENV=preview" >> $BASH_ENV
            elif [[ "$BRANCHE" == "integration" ]]; then
              echo "export VERCEL_ENV=preview" >> $BASH_ENV
            elif [[ "$BRANCHE" == "main" ]]; then
              echo "export VERCEL_ENV=production" >> $BASH_ENV
            else
              echo "export VERCEL_ENV=preview" >> $BASH_ENV
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .env*

  deploiement_vercel_dev:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Installation de Vercel CLI
          command: npm install -g vercel
      - run:
          name: Déploiement sur Vercel (environnement de développement)
          command: |
            echo "Déploiement vers l'environnement de développement..."
            vercel --token ${VERCEL_TOKEN} --confirm --no-clipboard --scope ${VERCEL_SCOPE} --env ENVIRONMENT=development

  deploiement_vercel_staging:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Installation de Vercel CLI
          command: npm install -g vercel
      - run:
          name: Déploiement sur Vercel (environnement de staging)
          command: |
            echo "Déploiement vers l'environnement de staging..."
            vercel --token ${VERCEL_TOKEN} --confirm --no-clipboard --scope ${VERCEL_SCOPE} --env ENVIRONMENT=staging

  deploiement_vercel_production:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Installation de Vercel CLI
          command: npm install -g vercel
      - run:
          name: Déploiement sur Vercel (environnement de production)
          command: |
            echo "Déploiement vers l'environnement de production..."
            vercel --token ${VERCEL_TOKEN} --prod --confirm --no-clipboard --scope ${VERCEL_SCOPE} --env ENVIRONMENT=production

  tests_performance_staging:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Tests de performance (staging)
          command: |
            echo "Exécution des tests de performance sur l'environnement de staging..."
            npm run perf:staging || echo "Tests de performance non configurés"

  tests_performance_production:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Tests de performance (production)
          command: |
            echo "Exécution des tests de performance sur l'environnement de production..."
            npm run perf:prod || echo "Tests de performance non configurés"

  surveillance_post_deploiement_staging:
    executor: node-executor
    steps:
      - checkout
      - run: 
          name: Surveillance après déploiement (staging)
          command: |
            echo "Surveillance de l'environnement de staging après déploiement..."
            curl -s ${STAGING_URL}/health || echo "Endpoint non disponible"

  surveillance_post_deploiement_production:
    executor: node-executor
    steps:
      - checkout
      - run: 
          name: Surveillance après déploiement (production)
          command: |
            echo "Surveillance de l'environnement de production après déploiement..."
            curl -s ${PRODUCTION_URL}/health || echo "Endpoint non disponible"

workflows:
  version: 2
  pipeline_complete:
    jobs:
      - initialisation
      - validation_code:
          requires:
            - initialisation
      - construction_projet:
          requires:
            - validation_code

      - tests_unitaires:
          requires:
            - construction_projet
      - tests_integration:
          requires:
            - construction_projet
      - tests_fonctionnels:
          requires:
            - construction_projet
      - tests_securite:
          requires:
            - construction_projet
      - tests_accessibilite:
          requires:
            - construction_projet
      - tests_compatibilite:
          requires:
            - construction_projet

      - generation_version:
          requires:
            - tests_unitaires
            - tests_integration
            - tests_fonctionnels
            - tests_securite
            - tests_accessibilite
            - tests_compatibilite
          filters:
            branches:
              only:
                - develop
                - integration
                - main
                
      - preparation_deploiement:
          requires:
            - generation_version

      - deploiement_vercel_dev:
          requires:
            - preparation_deploiement
          filters:
            branches:
              only: develop

      - deploiement_vercel_staging:
          requires:
            - preparation_deploiement
          filters:
            branches:
              only: integration

      - deploiement_vercel_production:
          requires:
            - preparation_deploiement
          filters:
            branches:
              only: main

      - tests_performance_staging:
          requires:
            - deploiement_vercel_staging
          filters:
            branches:
              only: integration

      - surveillance_post_deploiement_staging:
          requires:
            - tests_performance_staging
          filters:
            branches:
              only: integration

      - tests_performance_production:
          requires:
            - deploiement_vercel_production
          filters:
            branches:
              only: main

      - surveillance_post_deploiement_production:
          requires:
            - tests_performance_production
          filters:
            branches:
              only: main