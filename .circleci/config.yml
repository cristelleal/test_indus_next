version: 2.1

orbs:
  node: circleci/node@5

executors:
  node-executor:
    docker:
      - image: cimg/node:18.18
    resource_class: medium

jobs:
  initialisation:
    executor: node-executor
    steps:
      - checkout
      - run: 
          name: Installation des dépendances
          command: npm install
      - run:
          name: Vérification de Next.js
          command: npm list next || echo "Next.js non détecté dans le projet!"
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - package.json
            - package-lock.json

  validation_code:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Linting et analyse du code
          command: echo "Simulation de l'analyse de la qualité du code en cours..."
      - run:
          name: Vérification des types
          command: echo "Simulation de la vérification des typages..."

  construction_projet:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Construction du projet
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .next
            - public

  tests_unitaires:
    executor: node-executor
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./rapports-tests/
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Exécution des tests unitaires
          command: npm run test:unit || echo "Tests unitaires non configurés"
      - store_test_results:
          path: ./rapports-tests/

  generation_version:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Création d'un tag de version
          command: |
            DATE_VERSION=$(date +%Y%m%d%H%M)
            TAG_VERSION="prod-${DATE_VERSION}"
            echo "Version de production: ${TAG_VERSION}"
            echo "${TAG_VERSION}" > .version
      - persist_to_workspace:
          root: .
          paths:
            - .version

  preparation_deploiement:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: 
          name: Préparation de l'environnement
          command: echo "export VERCEL_ENV=production" >> $BASH_ENV
      - persist_to_workspace:
          root: .
          paths:
            - .env*

  deploiement_vercel_production:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Installation de Vercel CLI
          command: npm install -g vercel
      - run:
          name: Déploiement sur Vercel (production)
          command: |
            echo "Déploiement vers l'environnement de production..."
            vercel --token ${VERCEL_TOKEN} --prod --confirm --no-clipboard --scope ${VERCEL_SCOPE} --env ENVIRONMENT=production

  cleanup_branches:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Suppression des branches hotfix et feature après merge
          command: |
            git fetch --prune
            for branch in $(git branch -r | grep -E "origin/(hotfix|feature)/" | sed 's/origin\///'); do
              echo "Suppression de la branche: $branch"
              git push origin --delete "$branch" || echo "Impossible de supprimer $branch"
            done

workflows:
  version: 2
  pipeline_complete:
    jobs:
      - initialisation
      - validation_code:
          requires:
            - initialisation
      - construction_projet:
          requires:
            - validation_code
      - tests_unitaires:
          requires:
            - construction_projet
      - generation_version:
          requires:
            - tests_unitaires
          filters:
            branches:
              only: main
      - preparation_deploiement:
          requires:
            - generation_version
      - deploiement_vercel_production:
          requires:
            - preparation_deploiement
          filters:
            branches:
              only: main
      - cleanup_branches:
          requires:
            - deploiement_vercel_production
          filters:
            branches:
              only: main
